
/*
 * Copyright (c) 2020 ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
 
#include "keyball39.dtsi"
#include <input/processors.dtsi>

&default_transform {
    col-offset = <6>;
};

&kscan0 {
	col-gpios
		= <&pro_micro 4 GPIO_ACTIVE_HIGH>
		, <&pro_micro 5 GPIO_ACTIVE_HIGH>
		, <&pro_micro 6 GPIO_ACTIVE_HIGH>
		, <&pro_micro 7 GPIO_ACTIVE_HIGH>
		, <&pro_micro 8 GPIO_ACTIVE_HIGH>
        , <&pro_micro 9 GPIO_ACTIVE_HIGH>
		;
};

&pinctrl {
    spi1_default: spi1_default {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
                <NRF_PSEL(SPIM_MOSI, 0, 10)>,
                <NRF_PSEL(SPIM_MISO, 0, 10)>;
        };
    };

    spi1_sleep: spi1_sleep {
        group1 {
            psels = <NRF_PSEL(SPIM_SCK, 1, 13)>,
                <NRF_PSEL(SPIM_MOSI, 0, 10)>,
                <NRF_PSEL(SPIM_MISO, 0, 10)>;
            low-power-enable;
        };
    };
};

&spi1 {
    status = "okay";
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi1_default>;
    pinctrl-1 = <&spi1_sleep>;
    pinctrl-names = "default", "sleep";
    cs-gpios = <&gpio0 9 GPIO_ACTIVE_LOW>;

    trackball: trackball@0 {
        status = "okay";
        compatible = "pixart,pmw3610";
        reg = <0>;
        spi-max-frequency = <2000000>;
        irq-gpios = <&gpio1 11 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        automouse-layer = <1>;
	scroll-layers = <2>;
	snipe-layers = <3>;
    };
};

/*
/ {
  /omit-if-no-ref/ zip_temp_layer_exclude_39: zip_temp_layer_exclude_39 {
      compatible = "zmk,input-processor-temp-layer";
      #input-processor-cells = <2>;
      excluded-positions = <39>;
  };

  trackball_listener {
    compatible = "zmk,input-listener";
    device = <&trackball>;
    input-processors = <&zip_temp_layer_exclude_39 1 30000>;
  };
};
*/




///////////////////



#define DEFAULT 0
#define NUM     1
#define SYM     2
#define FUN     3
#define MOUSE   4
#define SCROLL  5
#define SNIPE   6

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
    quick-tap-ms = <150>;
};

&caps_word { continue-list = <UNDERSCORE MINUS>; };

/ {
    // custom shift using mod-morph 

    behaviors {
        cmqus: comma_question {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_QUESTION";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dtsmi: dot_semi {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SEMI";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        Hiragana: Hiragana {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(SPACE)>;
            label = "HIRAGANA";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWRT";
            bindings = <
&kp Q      &kp W         &kp E     &kp R         &kp T                                    &kp Y            &kp U  &kp I      &kp O    &kp P
&kp A      &kp S         &kp D     &kp F         &kp G                                    &kp H            &kp J  &kp K      &kp L    &kp SEMI
&kp Z      &kp X         &kp C     &kp V         &kp B                                    &kp N            &kp M  &kp COMMA  &kp DOT  &kp SLASH
&kp LCTRL  &kp LEFT_WIN  &kp LALT  &lt 6 ESCAPE  &lt 4 SPACE  &lt 5 LA(GRAVE)  &kp ENTER  &lt 2 BACKSPACE                             &kp RSHFT
            >;
        };

        number_layer {
            label = "NUM";
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5                  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0
&kp LEFT      &kp DOWN      &kp UP_ARROW  &kp RIGHT     &none                         &none         &none         &none         &none         &none
&none         &none         &none         &none         &none                         &none         &none         &trans        &trans        &none
&trans        &trans        &trans        &trans        &trans        &trans  &trans  &trans                                                  &trans
            >;
        };

        symbol_layer {
            label = "SYM";
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH      &kp DOLLAR    &kp PERCENT                  &kp CARET       &kp AMPERSAND  &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&bt BT_CLR       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans                       &kp MINUS       &kp EQUAL      &kp LEFT_BRACKET  &kp RIGHT_BRACKET     &kp SQT
&trans           &trans        &trans        &trans        &trans                       &kp UNDERSCORE  &kp PLUS       &trans            &trans                &kp NON_US_BACKSLASH
&trans           &trans        &trans        &trans        &trans       &trans  &trans  &trans                                                                 &trans
            >;
        };

        function_layer {
            label = "FUN";
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &none                   &none   &none  &none  &none  &none
&kp F5  &kp F6   &kp F7   &kp F8   &none                   &none   &none  &none  &none  &none
&kp F9  &kp F10  &kp F11  &kp F12  &none                   &none   &none  &none  &none  &none
&trans  &trans   &trans   &trans   &trans  &trans  &trans  &trans                       &trans
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
&kp N1          &kp N2          &kp N3        &kp N4     &kp N5                  &kp N6         &kp N7     &kp N8  &kp N9     &kp N0
&kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT  &none                   &kp PAGE_UP    &mkp LCLK  &none   &mkp RCLK  &mkp MCLK
&none           &none           &none         &none      &none                   &kp PAGE_DOWN  &none      &none   &none      &none
&none           &trans          &trans        &trans     &trans  &trans  &trans  &mo 3                                        &none
            >;
        };

        scroll_layer {
            label = "SCROLL";
            bindings = <
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans                          &trans
            >;
        };

        snipe_layer {
            label = "SNIPE";
            bindings = <
&trans  &trans  &trans  &trans  &bootloader                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans                       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans       &trans  &trans  &trans                          &trans
            >;
        };
    };
};



////////////////////////////////////////////////////




#define COMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <199>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    slow-release; \
    layers = <BASE>; \
  };
#define RCOMBOACT(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <2000>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    slow-release; \
    layers = <BASE NAVOVERR DIRECTACC HOMEROW RAISE LOWER FUNC>; \
  };
#define RCOMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <500>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    require-prior-idle-ms = <150>; \
    layers = <BASE NAVOVERR DIRECTACC HOMEROW RAISE LOWER FUNC>; \
  };
#define NAVBACOMBO(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <200>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <NAVOVERR>; \
  };
#define COMBODIRECTACC(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <500>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <DIRECTACC>; \
  };
#define COMBOADJ(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <500>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <ADJ>; \
  };
#define COMBOTS(NAME, BINDINGS, KEYPOS) \
  combo_##NAME { \
    timeout-ms = <500>; \
    bindings = <BINDINGS>; \
    key-positions = <KEYPOS>; \
    layers = <TILDESHIFT>; \
  };


    combos {
        compatible = "zmk,combos";
        //LEFT HAND

        RCOMBOACT(comb_wf, &kp ESC, 0 1 2)// Q W F
        RCOMBOACT(comb_fp, &kp SPACE, 1 2 3)// W F P
        RCOMBOACT(comb_pb, &kp ENTER, 3 4)// P B
        RCOMBOACT(comb_pb_2, &kp ENTER, 12 3 13)// SPT
        RCOMBOACT(comb_tg_2, &kp TAB, 23 13 24)// CDT
        RCOMBOACT(comb_tg, &kp TAB, 24 25)// DV
        RCOMBOACT(comb_cd, &kp BACKSPACE, 22 23 24)// X C D
        RCOMBOACT(comb_xc, &kp DELETE, 21 22 23)// Z X C
        RCOMBO(comb_gv, &kp MINUS, 14 25)// G V
        RCOMBO(comb_td, &kp GRAVE, 13 24)// T D 
        RCOMBO(comb_sc, &kp RBKT, 12 23)// S C
        RCOMBO(comb_rx, &kp LBKT, 11 22)// R X
        RCOMBO(comb_az, &kp BSLH, 10 21)// A Z
        //RIGHT HAND

        RCOMBO(requal, &kp EQUAL, 15 26)
        RCOMBO(rsemi, &kp SEMI, 16 27)
        RCOMBO(SEMI, &kp COMMA, 17 28)
        RCOMBO(COLON, &kp DOT, 18 29)
        RCOMBO(FSLH, &kp FSLH, 19 30)

        //NUMBERS

        RCOMBO(NUM1, &kp N1, 0 10)
        RCOMBO(NUM2, &kp N2, 1 11)
        RCOMBO(NUM3, &kp N3, 2 12)
        RCOMBO(NUM4, &kp N4, 3 13)
        RCOMBO(NUM5, &kp N5, 4 14)
        RCOMBO(NUM6, &kp N6, 5 15)
        RCOMBO(NUM7, &kp N7, 6 16)
        RCOMBO(NUM8, &kp N8, 7 17) 
        RCOMBO(NUM9, &kp N9, 8 18)
        RCOMBO(NUM0, &kp N0, 9 19)

        //THUMBS

        //COMBO(delete_space, &mo HOMEROW, 37 35)// ENTER SPACE
        //COMBO(bkspace_delete2, &mo DIRECTACC, 34 32)// BKSPACE TAB
        //COMBO(delete_enter, &sl FUNC, 32 37)// TAB ENTER
        COMBO(bkspace_spaceqq, &mo NUMBERS, 33 36)// BKSPACE SPACE
        COMBO(bkspace_enter, &mo FUNC, 33 35)// BKSPACE ENTER
        //NavOverR

        NAVBACOMBO(pg_0, &kp HOME, 27 28)// H , 
        NAVBACOMBO(pg_1, &kp END, 28 29)// , .
        NAVBACOMBO(pg_4, &kp PG_UP, 27 18)// , H 
        NAVBACOMBO(pg_5, &kp PG_DN, 18 29)// H .
        // ADJUST

        //COMBODIRECTACC(adj_tog_on, &tog_on ADJ,  0  1  2  3 )
        //COMBOADJ(adj_tog_off, &tog_off ADJ,  0  1  2  3 )

// 20 o mas se resta 1
//32 o mas se restan 2


        //     0  1  2  3  4         5  6  7  8  9
        //    10 11 12 13 14        15 16 17 18 19
        //    20 21 22 23 24        25 26 27 28 29 
        //    30 31 32 33 34 35  36 37          38

        //     0  1  2  3  4     5  6  7  8  9
        //    10 11 12 13 14    15 16 17 18 19
        //20  21 22 23 24 25    26 27 28 29 30  31
        //        32 33 34         35 36 37




        /////////////////
        //START Dragmod//
        /////////////////

        c-hr-thumb-ar {
            bindings = <&kp LS(LCTRL)>;
            key-positions = <34 10 11>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-ars {
            bindings = <&kp LS(LA(LCTRL))>;
            key-positions = <34 10 11 12>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-arst {
            bindings = <&kp LS(LA(LG(LCTRL)))>;
            key-positions = <34 10 11 12 13>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-art {
            bindings = <&kp LS(LC(LCMD))>;
            key-positions = <34 10 11 13>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-ast {
            bindings = <&kp LS(LA(LCMD))>;
            key-positions = <34 10 13 12>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-rst {
            bindings = <&kp LA(LC(LCMD))>;
            key-positions = <34 13 12 11>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-at {
            bindings = <&kp LS(LCMD)>;
            key-positions = <34 13 10>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-st {
            bindings = <&kp LA(LCMD)>;
            key-positions = <34 12 13>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-rs {
            bindings = <&kp LC(LALT)>;
            key-positions = <34 12 11>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-rt {
            bindings = <&kp LC(LCMD)>;
            key-positions = <34 13 11>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        c-hr-thumb-as {
            bindings = <&kp LS(LALT)>;
            key-positions = <34 10 12>;
            layers = <BASE KDL_A_10 KDL_R_11 KDL_S_12 KDL_T_13>;
            slow-release;
            timeout-ms = <2000>;
        };

        ///////////////
        //END Dragmod//
        ///////////////

    };